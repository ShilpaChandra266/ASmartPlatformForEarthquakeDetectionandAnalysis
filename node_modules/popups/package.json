{
  "_from": "popups",
  "_id": "popups@1.1.3",
  "_inBundle": false,
  "_integrity": "sha1-a8zpTf/ZW2GaAToFpcCUCRFRDak=",
  "_location": "/popups",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "popups",
    "fetchSpec": "latest",
    "name": "popups",
    "raw": "popups",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/popups/-/popups-1.1.3.tgz",
  "_shasum": "6bcce94dffd95b619a013a05a5c0940911510da9",
  "_spec": "popups",
  "_where": "C:\\Education\\295\\earthquakeproject",
  "author": {
    "name": "ChiefORZ"
  },
  "bugs": {
    "url": "https://github.com/ChiefORZ/popupS/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Native Javascript Modal/Popup system. With react support!",
  "devDependencies": {
    "grunt": "*",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-cssmin": "^0.14.0",
    "grunt-contrib-uglify": "*",
    "grunt-contrib-watch": "*",
    "grunt-usebanner": "^0.3.1"
  },
  "homepage": "https://github.com/ChiefORZ/popupS#readme",
  "keywords": [
    "alert",
    "dialog",
    "javascript",
    "js",
    "layer",
    "lightbox",
    "message",
    "modal",
    "native javascript",
    "no jQuery",
    "popup",
    "prompt",
    "pure javascript"
  ],
  "license": "MIT",
  "main": "dist/popupS.js",
  "name": "popups",
  "optionalDependencies": {},
  "readme": "# popupS\r\n\r\nNative Javascript Module to display beautiful popups. With react support!\r\n\r\n## Features\r\n\r\n* Demo: http://chieforz.github.io/popupS\r\n* Native Javascript / No jQuery dependency\r\n* Built in CSS spinner for asynchronous dialogs\r\n* Smart focus on form elements\r\n* AMD support\r\n\r\n********\r\n\r\n## Installation\r\n\r\nThe plugin can be used as a Common JS module, an AMD module, or a global.\r\n\r\n### Usage with Browserify\r\n\r\nInstall with npm, use with [Browserify](http://browserify.org/)\r\n\r\n```\r\n> npm install popups\r\n```\r\n\r\nand in your code\r\n\r\n```javascript\r\nvar popupS = require('popups');\r\n\r\npopupS.alert({\r\n    content: 'Hello World!'\r\n});\r\n```\r\n\r\nFor the basic styling and fade in and out to be working, you have to include the [popupS.css](css/popupS.css) in yout header.\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"popupS.css\">\r\n```\r\n\r\n### Usage as browser global\r\n\r\nYou can include [popupS.js](dist/popupS.js) directly in a script tag.\r\nFor the basic styling and fade in and out to be working, you have to include the [popupS.css](css/popupS.css).\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"popupS.css\">\r\n<script src=\"popupS.js\"></script>\r\n\r\n<script>\r\n    popupS.alert({\r\n        content: 'Hello World!'\r\n    });\r\n</script>\r\n```\r\n\r\n> For both files `popupS.js` and `popupS.css` is a minified productive version in it's corresponding folder.\r\n\r\n********\r\n\r\n## How to use\r\n\r\nCreate a popup window:\r\n\r\n```javascript\r\npopupS.window({\r\n    mode: 'alert',\r\n    content: 'Hey'\r\n});\r\n\r\n// or\r\n\r\npopupS.alert({\r\n    content: 'Hello'\r\n});\r\n```\r\n\r\nHere are multiple ways to create popupS:\r\n\r\n### Alerts\r\n\r\n```javascript\r\npopupS.alert({\r\n    title:   'I am an',\r\n    content: 'Alert'\r\n});\r\n```\r\n\r\n### Confirm\r\n\r\nConfirm configuration involves the use of callbacks to be applied.\r\n\r\n```javascript\r\npopupS.confirm({\r\n    content:     '<b>Do you like what you see?</b>',\r\n    labelOk:     'Yes',\r\n    labelCancel: 'No',\r\n    onSubmit: function() {\r\n        console.log(':)');\r\n    },\r\n    onClose: function() {\r\n        console.log(':(');\r\n    }\r\n});\r\n```\r\n\r\n### Prompt\r\n\r\nPrompts are used for asking a single question.\r\n\r\n```javascript\r\npopupS.prompt({\r\n    content:     'What is your name?',\r\n    placeholder: '>>>',\r\n    onSubmit: function(val) {\r\n        if(val) {\r\n            popupS.alert({\r\n                content: 'Hello, ' + val\r\n            });\r\n        } else {\r\n            popupS.alert({\r\n                content: ':('\r\n            });\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n### Modal\r\n\r\nWith Modals you are in full control.\r\n\r\n```javascript\r\npopupS.modal({\r\n    title:   'Himalaya',\r\n    content: {\r\n        tag: 'img#himalaya.picture',\r\n        src: 'http://static.hdw.eweb4.com/media/wallpapers_1920x1080/nature/1/1/himalaya-nature-hd-wallpaper-1920x1080-6944.jpg'\r\n    }\r\n});\r\n```\r\n\r\n> there is some magic sugar involved. learn more about it [here](#dom-generation)\r\n\r\n### Ajax\r\n\r\nIt can also work in asynchronous mode and retrieve content from external pages.\r\n\r\n```javascript\r\npopupS.ajax({\r\n    title:   'Himalaya',\r\n    ajax: {\r\n        url: 'http://static.hdw.eweb4.com/media/wallpapers_1920x1080/nature/1/1/himalaya-nature-hd-wallpaper-1920x1080-6944.jpg'\r\n    }\r\n});\r\n```\r\n\r\n********\r\n\r\n## Options\r\n\r\n```javascript\r\npopupS.window({\r\n    mode: 'alert'|'confirm'|'prompt'|'modal'|'modal-ajax',\r\n    title: 'Title', \r\n    content : 'Text'|'<div>html</div>'|{tag : 'span#id.class'},\r\n    className : 'additionalClass',  // for additional styling, gets append on every popup div\r\n    placeholder : 'Input Text',     // only available for mode: 'prompt'\r\n    ajax : {                        // only available for mode: 'modal-ajax'\r\n        url : 'http://url.com', \r\n        post : true,\r\n        str : 'post=true'\r\n    },\r\n    onOpen: function(){},      // gets called when popup is opened\r\n    onSubmit: function(val){}, // gets called when submitted. val as an paramater for prompts\r\n    onClose: function(){}      // gets called when popup is closed\r\n});\r\n```\r\n\r\n### Advanced Options\r\n\r\n```javascript\r\npopupS.window({\r\n    additionalBaseClass: '',            // classNames, that gets appended to the base\r\n    additionalButtonHolderClass: '',    // classNames, that gets appended to the button holder\r\n    additionalButtonOkClass: '',        // classNames, that gets appended to the ok button\r\n    additionalButtonCancelClass: '',    // classNames, that gets appended to the cancel button\r\n    additionalCloseBtnClass: '',        // classNames, that gets appended to the close button\r\n    additionalFormClass: '',            // classNames, that gets appended to the form\r\n    additionalOverlayClass: '',         // classNames, that gets appended to the overlay\r\n    additionalPopupClass: '',           // classNames, that gets appended to the popup\r\n    appendLocation: document.body,      // DOM Element, where the popup should sit\r\n    closeBtn: '&times;',                // HTML String, to use for the close button\r\n    flagBodyScroll: false,              // should the body be scrollable\r\n    flagButtonReverse: false,           // should the buttons be reversed\r\n    flagCloseByEsc: true,               // ability to clse with the esc key\r\n    flagCloseByOverlay: true,           // ability to close with click on the overlay\r\n    flagShowCloseBtn: true,             // should the close button be displayed\r\n    labelOk: 'OK',                      // label for the ok button\r\n    labelCancel: 'Cancel',              // label for the cancel button\r\n    loader: 'spinner',                  // classname for spinner to use, take a look at the included css file for the possiblities\r\n    zIndex: 10000                       // default z-index\r\n});\r\n```\r\n\r\n********\r\n\r\n## DOM Generation\r\n\r\nThe plugin is using some special magic to generating DOM Elements.\r\n\r\n```javascript\r\npopupS.alert({\r\n    content: {\r\n       \r\n        tag: 'div#id.class.class2',\r\n        css: {\r\n            width: '100px'\r\n        },\r\n        html: '<h1>Hello</h1>',\r\n        children:[\r\n            {\r\n                tag: 'label',\r\n                text: 'test',\r\n                htmlFor: 'input',\r\n                css: {\r\n                    width: '50%'\r\n                }\r\n            },\r\n            {\r\n                tag: 'input#input',\r\n                type: 'checkbox',\r\n                css: {\r\n                    width: '50%'\r\n                }\r\n            }\r\n        ]\r\n        \r\n    }\r\n});\r\n```\r\n\r\n> All attributes, that can be applied via javascript are availabe to use.\r\n> For example, as you can see in the example above:\r\n> Instead of using the regular \"for\"-attribute on the label element,\r\n> we have to use the \"htmlFor\"-attribute.\r\n\r\n> **Note:**\r\n> If an assigned attribute is not an valid HTML attribute, it gets assigned as an 'data-'* atribute.\r\n\r\n********\r\n\r\n## License\r\n\r\n[MIT](https://opensource.org/licenses/MIT)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ChiefORZ/popupS.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.1.3"
}
